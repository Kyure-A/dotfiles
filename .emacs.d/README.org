#+title: init.org
#+description: Kyure_A's Emacs config
#+author: Kyure_A

* Introduction

** Author
Kyure_A

** Repository
https://github.com/Kyure-A/dotfiles/tree/master/.emacs.d

** Screen shot
[[file:../assets/emacs_screenshot.png]]

* Configurations

** Initialize
*** Header
#+begin_src emacs-lisp 
  ;;; init.el ---  -*- lexical-binding: t -*-

  ;; Author: Kyure_A <twitter.com/@kyureq>
  ;; Maintainer: Kyure_A <twitter.com/@kyureq>

  ;;; Commentary:

  ;;              .mmmmmmmmmmmmmm.                   .cccccccc!                .(.
  ;;  .+eeeee.   .??:   +m<   <mm.    .aaaaaaaa.    ccC!           .+sssss{    (!!
  ;; .ee:        .mm:   +mm   .mm_   .aa>   (aaA    cCC           .ss>         1!:
  ;; .ee_        .mm:   +mm   .mm_   .aa{    aaA    ccC           .sss.        !!
  ;; .ee_ <ee    .mm:   +mm   .mm_   .aa{ .(AaaA    cCC`           .<sssss    .!:
  ;; .ee_        .mm:   +mm   .mm_   .aa{ .??aaA    cCCc......         .ss:   ..
  ;; .eee....    .<<!   ?<<   .<<`   .aa{    aaA     ?CCCCCCC!    ....(s=: .!!-
  ;;  .?eeeee`                       .AA!    AAA                  .ssss<s!   .!!

  ;;; Code:  
#+end_src

*** User Info
#+begin_src emacs-lisp 
  (setq user-full-name "Kyure_A")
  (setq user-mail-address "k@kyre.moe")
#+end_src

*** Disable Magic File Name at startup
#+begin_src emacs-lisp
  (defconst init/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook (lambda () (setq file-name-handler-alist init/saved-file-name-handler-alist)))
#+end_src

*** setup tracker
#+begin_src emacs-lisp
  (defvar setup-tracker--level 0)
  (defvar setup-tracker--parents nil)
  (defvar setup-tracker--times nil)

  (when load-file-name
    (push load-file-name setup-tracker--parents)
    (push (current-time) setup-tracker--times)
    (setq setup-tracker--level (1+ setup-tracker--level)))

  (add-variable-watcher
   'load-file-name
   (lambda (_ v &rest __)
     (cond ((equal v (car setup-tracker--parents))
            nil)
           ((equal v (cadr setup-tracker--parents))
            (setq setup-tracker--level (1- setup-tracker--level))
            (let* ((now (current-time))
                   (start (pop setup-tracker--times))
                   (elapsed (+ (* (- (nth 1 now) (nth 1 start)) 1000)
                               (/ (- (nth 2 now) (nth 2 start)) 1000))))
              (with-current-buffer (get-buffer-create "*setup-tracker*")
                (save-excursion
                  (goto-char (point-min))
                  (dotimes (_ setup-tracker--level) (insert "> "))
                  (insert
                   (file-name-nondirectory (pop setup-tracker--parents))
                   " (" (number-to-string elapsed) " msec)\n")))))
           (t
            (push v setup-tracker--parents)
            (push (current-time) setup-tracker--times)
            (setq setup-tracker--level (1+ setup-tracker--level))))))
#+end_src

*** with-delayed-execution
[[https://zenn.dev/takeokunn/articles/56010618502ccc#:~:text=%E5%85%83%E8%A8%98%E4%BA%8B%E3%82%92%E5%8F%82%E8%80%83%E3%81%AB%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D%E9%AB%98%E3%81%84queue%E3%82%92%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B%E6%A9%9F%E6%A7%8B%E3%82%82%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82][Source]]
#+begin_src emacs-lisp 
  (defvar my/delayed-priority-high-configurations '())
  (defvar my/delayed-priority-high-configuration-timer nil)

  (defvar my/delayed-priority-low-configurations '())
  (defvar my/delayed-priority-low-configuration-timer nil)

  (setq my/delayed-priority-high-configuration-timer
        (run-with-timer
         0.1 0.001
         (lambda ()
           (if my/delayed-priority-high-configurations
               (let ((inhibit-message t))
                 (eval (pop my/delayed-priority-high-configurations)))
             (progn
               (cancel-timer my/delayed-priority-high-configuration-timer))))))

  (setq my/delayed-priority-low-configuration-timer
          (run-with-timer
           0.3 0.001
           (lambda ()
             (if my/delayed-priority-low-configurations
                 (let ((inhibit-message t))
                   (eval (pop my/delayed-priority-low-configurations)))
               (progn
                 (cancel-timer my/delayed-priority-low-configuration-timer))))))

  (defmacro with-delayed-execution-priority-high (&rest body)
    (declare (indent 0))
    `(setq my/delayed-priority-high-configurations
           (append my/delayed-priority-high-configurations ',body)))

  (defmacro with-delayed-execution (&rest body)
    (declare (indent 0))
    `(setq my/delayed-priority-low-configurations
           (append my/delayed-priority-low-configurations ',body)))
#+end_src

*** autoload-if-found
#+begin_src emacs-lisp
  ;;;###autoload
  (cl-defun autoload-if-found (functions file &optional docstring (interactive nil) (type t))
    "set autoload iff. FILE has found."
    (when (locate-library file)
      (dolist (f functions)
        (autoload f file docstring interactive type))
      t))
#+end_src

*** cl-lib
#+begin_src emacs-lisp
  (eval-and-compile
    (setq byte-compile-warnings '(cl-functions))
    (require 'cl-lib nil t))

  (with-delayed-execution-priority-high
    (require 'cl-lib))
#+end_src

*** el-clone
#+begin_src emacs-lisp
  (eval-when-compile
    (unless (file-directory-p "~/.emacs.d/elpa/el-clone")
      (if (fboundp 'package-vc-install)
          (package-vc-install "https://github.com/Kyure-A/el-clone.git")
        (customize-set-variable 'package-archives '(("kelpa" . "https://kelpa.kyre.moe/")))
        (package-initialize)
        (package-install 'el-clone))))

  (eval-and-compile
    (add-to-list 'load-path "~/.emacs.d/elpa/el-clone")
    (require 'el-clone))
#+end_src

** Keybindings
*** global-set-key
**** Special Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "<f2>") 'toggle-eat)
  (global-set-key (kbd "<f3>") 'dashboard-open)
  (global-set-key (kbd "RET") 'smart-newline)
  (global-set-key (kbd "C-RET") 'newline)
  (global-set-key (kbd "<backspace>") 'smart-hungry-delete-backward-char)
  (global-set-key (kbd "C-<backspace>") 'backward-delete-word)
  (global-set-key (kbd "C-<left>") 'centaur-tabs-forward)
  (global-set-key (kbd "C-<right>") 'centaur-tabs-backward)
  (global-set-key (kbd "C-<return>") 'newline)
  (global-set-key (kbd "C-SPC") 'toggle-input-method)
#+end_src

**** C-x
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (global-set-key (kbd "C-x i") 'nil)
  (global-set-key (kbd "C-x i i") 'ivy-yasnippet)
  (global-set-key (kbd "C-x i n") 'yas-new-snippet)
  (global-set-key (kbd "C-x u") 'undo-tree-visualize)
  (global-set-key (kbd "C-x C-z") 'nil)
  (global-set-key (kbd "C-x C-c") 'nil)
#+end_src

**** C-c
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c e b") 'eval-buffer)
  (global-set-key (kbd "C-c e m") 'menu-bar-mode)
  (global-set-key (kbd "C-c o") 'Kyure_A/open)
  (global-set-key (kbd "C-c p") 'smartparens-global-mode)
  (global-set-key (kbd "C-c s") 'Kyure_A/start-repl)
  (global-set-key (kbd "C-c t") 'centaur-tabs-counsel-switch-group)
  (global-set-key (kbd "C-c r") 'vr/replace)
#+end_src

**** C-l (lsp-mode)
#+begin_src emacs-lisp
  (global-set-key (kbd "C-l") 'nil)
  (global-set-key (kbd "C-l C-l") 'lsp)
#+end_src

**** C-*
#+begin_src emacs-lisp
  (global-set-key (kbd "C-a") 'mwim-beginning-of-code-or-line)
  (global-set-key (kbd "C-d") 'smart-hungry-delete-backward-char)
  (global-set-key (kbd "C-e") 'mwim-end-of-code-or-line)
  (global-set-key (kbd "C-h") 'smart-hungry-delete-backward-char)
  (global-set-key (kbd "C-m") 'smart-newline)
  (global-set-key (kbd "C-o") 'nil)
  (global-set-key (kbd "C-u") 'undo-tree-undo)
  (global-set-key (kbd "C-r") 'undo-tree-redo)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-z") 'undo-tree-undo)
  (global-set-key (kbd "C-/") 'other-window)
  (global-set-key (kbd "C-;") 'smart-hungry-delete-forward-char)
#+end_src

**** M-* 
#+begin_src emacs-lisp
  (global-set-key (kbd "M-k") 'puni-backward-kill-line)
  (global-set-key (kbd "M-x") 'counsel-M-x)
#+end_src

**** yes/no
#+begin_src emacs-lisp
  (with-delayed-execution
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src

*** avy
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/avy"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/avy"))
    (with-eval-after-load 'avy
      (setq avy-all-windows nil)
      (setq avy-background t)))
#+end_src

*** mwim
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alezost/mwim.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mwim"))
    (autoload-if-found '(mwim-beginning-of-code-or-line
                         mwim-end-of-code-or-line)
                       "mwim"))
#+end_src

*** smart-hungry-delete
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hrehfeld/emacs-smart-hungry-delete"))
  
  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-smart-hungry-delete"))
    (with-eval-after-load 'smart-hungry-delete
      (smart-hungry-delete-add-default-hooks))
    (autoload-if-found '(smart-hungry-delete-forward-char
                         smart-hungry-delete-backward-char)
                       "smart-hungry-delete"))
#+end_src

*** smart-newline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ainame/smart-newline.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/smart-newline"))
    (autoload-if-found '(smart-newline) "smart-newline"))
#+end_src

** Common

*** Mouse
#+begin_src emacs-lisp 
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-preserve-screen-position 'always)
#+end_src

*** Scroll

**** good-scroll
cause bug?
#+begin_src emacs-lisp :tangle no
  (eval-when-compile
    (el-clone :repo "io12/good-scroll.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/good-scroll"))
    (autoload-if-found '(good-scroll-mode) "good-scroll")
    (good-scroll-mode t))
#+end_src

**** sublimity
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zk-phi/sublimity"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/sublimity"))
    (autoload-if-found '(sublimity-mode) "sublimity")
    (sublimity-mode t)
    (with-eval-after-load 'sublimity
      (setq sublimity-attractive-centering-width 200)
      (setq sublimity-scroll-weight 15)
      (setq sublimity-scroll-drift-length 10)))
#+end_src

*** Indent
#+begin_src emacs-lisp 
  (setq-default indent-tabs-mode nil)
#+end_src

*** save-place-mode
#+begin_src emacs-lisp 
  (with-delayed-execution
    (save-place-mode t))
#+end_src

*** System Language Setting
#+begin_src emacs-lisp 
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default 'buffer-file-coding-system 'utf-8)
#+end_src

*** Overwrite Region
#+begin_src emacs-lisp 
  (with-delayed-execution
    (delete-selection-mode t))
#+end_src

*** auto yes (async-shell-command)
[[https://emacs.stackexchange.com/questions/14669/sort-of-autoreply-for-specific-messages-in-minibuffer][Source]]
#+begin_src emacs-lisp
  (defun auto-yes (old-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t))
               ((symbol-function 'yes-or-no-p) (lambda (prompt) t)))
      (apply old-fun args)))

  (advice-add #'async-shell-command :around #'auto-yes)
#+end_src

*** shut up (async-shell-command)
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist '("*Async Shell Command*" display-buffer-no-window (nil)))
#+end_src

*** After save
#+begin_src emacs-lisp
  (defun my/compile-init-org ()
    (shell-command-to-string
     (mapconcat #'shell-quote-argument
                `("emacs" "-Q" "--batch" "--eval" "(progn (require 'ob-tangle) (org-babel-tangle-file \"~/.emacs.d/README.org\" \"~/.emacs.d/init.el\" \"emacs-lisp\"))")
                " ")))

  (defun my/compile-early-init-org ()
    (shell-command-to-string
     (mapconcat #'shell-quote-argument
                `("emacs" "-Q" "--batch" "--eval" "(progn (require 'ob-tangle) (org-babel-tangle-file \"~/.emacs.d/early-init.org\" \"~/.emacs.d/early-init.el\" \"emacs-lisp\"))")
                " ")))


  (defun my/compile-init-files ()
    (interactive)
    (my/compile-early-init-org)
    (my/compile-init-org)
    (byte-compile-file "~/.emacs.d/early-init.el")
    (byte-compile-file "~/.emacs.d/init.el"))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/compile-init-files)))
#+end_src

*** Show Clock
#+begin_src emacs-lisp
  (with-delayed-execution
    (display-time-mode t)
    (setq display-time-interval 1)
    (setq display-time-string-forms '((format "%s:%s:%s" 24-hours minutes seconds)))
    (setq display-time-day-and-date t))
#+end_src

*** Auto revert
#+begin_src emacs-lisp
  (with-delayed-execution
    (global-auto-revert-mode t)
    (setq auto-revert-interval 1))
#+end_src

*** which function
#+begin_src emacs-lisp
  (with-delayed-execution
    (which-function-mode t))
#+end_src

*** recent file
#+begin_src emacs-lisp
  (with-delayed-execution
    (recentf-mode t)
    (setq recently-file (locate-user-emacs-file "recently"))
    (setq recentf-max-saved-items 150)
    (setq recentf-auto-cleanup 'never)
    (setq recentf-exclude '("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:" "/\\.emacs\\.d/games/*-scores" "/\\.emacs\\.d/\\.tmp/")))

  (eval-when-compile
    (el-clone :repo "emacsmirror/recently"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/recently"))
    (autoload-if-found '(recently-mode) "recently")
    (recently-mode t))
#+end_src

*** suppress window splitting
#+begin_src emacs-lisp
  (set-frame-parameter nil 'unsplittable t)
#+end_src

*** load custom.el
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
#+end_src

*** debug-on-error
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src

*** disable make lockfiles
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

*** backup directories
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.tmp")))
#+end_src

*** auto save
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.tmp/" t)))
  (setq auto-save-list-file-prefix nil)
  (setq auto-save-default nil)
#+end_src

*** native compile
#+begin_src emacs-lisp
  (custom-set-variables '(warning-suppress-types '((comp))))
  (with-eval-after-load 'comp
    (setq native-comp-async-jobs-number 8)
    (setq native-comp-speed 3)
    (setq native-comp-always-compile t))
#+end_src

** Emacs Lisp Libraries
*** aio
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/emacs-aio"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-aio")))
#+end_src

*** ansi
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rejeep/ansi"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ansi")))
#+end_src

*** async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jwiegley/emacs-async"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-async")))
#+end_src

*** async-await
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "chuntaro/emacs-async-await"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-async-await")))
#+end_src

*** bui
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alezost/bui.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/bui")))
#+end_src

*** cfrs
#+begin_src emacs-lisp
  (eval-when-compile
      (el-clone :repo "Alexander-Miller/cfrs"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cfrs")))
#+end_src

*** compat
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "phikal/compat.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/compat")))
#+end_src

*** dash
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/dash.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dash")))
#+end_src

*** dotenv
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "pkulev/dotenv.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dotenv")))
#+end_src

*** eask
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-eask/eask")
    (el-clone :repo "emacs-eask/eask-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eask"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eask-mode"))
    (autoload-if-found '(eask-mode) "eask-mode" nil t)
    (add-to-list 'auto-mode-alist '("Eask" . eask-mode)))
#+end_src

*** el-project
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Kyure-A/el-project"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/el-project")))
#+end_src

*** eldoc
#+begin_src emacs-lisp
  (with-delayed-execution
    (autoload-if-found '(turn-on-eldoc-mode) "eldoc" nil t)

  (with-eval-after-load 'elisp-mode
    (add-hook 'emacs-lisp-mode-hook #'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook #'turn-on-eldoc-mode)))
#+end_src

*** elsa
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-elsa/Elsa"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/Elsa"))
    (autoload-if-found '(elsa-run) "elsa")
    (with-eval-after-load 'elsa
      (elsa-lsp-register)))

  (eval-when-compile
    (el-clone :repo "emacs-elsa/flycheck-elsa"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flycheck-elsa"))

    (autoload-if-found '(flycheck-elsa-setup) "flycheck-elsa")
    (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

    (with-eval-after-load 'elisp-mode
      (setq flycheck-elsa-backend 'eask)
      (add-hook 'emacs-lisp-mode-hook #'flycheck-elsa-setup)))
#+end_src

*** elquery
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "AdamNiederer/elquery"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elquery")))
#+end_src

*** emacsql
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/emacsql"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacsql")))
#+end_src

*** epl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "cask/epl"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/epl")))
#+end_src

*** f
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rejeep/f.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/f")))
#+end_src

*** frame-local
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sebastiencs/frame-local"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/frame-local")))
#+end_src

*** ht
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Wilfred/ht.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ht")))
#+end_src

*** iter2
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "doublep/iter2"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/iter2")))
#+end_src

*** Keg
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "conao3/keg.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/keg"))
    (add-to-list 'auto-mode-alist '("Keg" . emacs-lisp-mode)))
#+end_src

*** lgr
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Fuco1/emacs-lgr"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-lgr")))
#+end_src

*** lisp-interaction-mode
#+begin_src emacs-lisp
  (with-delayed-execution
    (define-key lisp-interaction-mode-map (kbd "C-j") #'eval-print-last-sexp))
#+end_src

*** package-build
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "melpa/package-build"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/package-build"))
    (require 'package-build))
#+end_src

*** package-lint
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "purcell/package-lint"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/package-lint"))
    (autoload-if-found '(package-lint-current-buffer) "package-lint"))
#+end_src

*** pos-tip
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tjarvstrand/pos-tip"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pos-tip")))
#+end_src

*** promise
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "chuntaro/emacs-promise"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-promise")))
#+end_src

*** s
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/s.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/s")))
#+end_src

*** shrink-path
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zbelial/shrink-path.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/shrink-path")))
#+end_src

*** simple-httpd
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/emacs-web-server"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-web-server")))
#+end_src

*** spinner
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Malabarba/spinner.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/spinner")))
#+end_src

*** tablist
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "politza/tablist"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/tablist")))
#+end_src

*** transient
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magit/transient"
              :load-paths `(,(locate-user-emacs-file "el-clone/transient/lisp"))))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/transient/lisp")))
#+end_src

*** trinary
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-elsa/trinary-logic"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/trinary-logic")))
#+end_src

*** pfuture
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Alexander-Miller/pfuture"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pfuture")))
#+end_src

*** pkg-info
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/pkg-info"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/pkg-info")))
#+end_src

*** queue
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/queue"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/queue")))
#+end_src

*** recur
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ROCKTAKEY/recur"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/recur")))
#+end_src

*** request
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tkf/emacs-request"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-request")))
#+end_src

*** shut-up
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "cask/shut-up"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/shut-up")))
#+end_src

*** undercover
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "sviridov/undercover.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/undercover")))
#+end_src

*** websocket
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ahyatt/emacs-websocket"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-websocket")))
#+end_src

*** yaml
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "zkry/yaml.el"))
  
  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yaml")))
#+end_src


** Programming Languages
*** Arduino Style C
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :url "https://repo.or.cz/arduino-mode.git"
              :repo "arduino-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/arduino-mode"))
    (autoload-if-found '(arduino-mode) "arduino-mode")
    (add-to-list 'auto-mode-alist '("\\.ino$" . arduino-mode)))
#+end_src

*** Common Lisp
#+begin_src emacs-lisp 
  (with-delayed-execution
    (autoload-if-found '(lisp-mode) "lisp-mode")
    (add-to-list 'auto-mode-alist '("\\.cl$" . lisp-mode)))

  (eval-when-compile
    (el-clone :repo "joaotavora/sly"
              :load-paths `(,(locate-user-emacs-file "el-clone/sly/lib")
                            ,(locate-user-emacs-file "el-clone/sly/contrib")
                            ,(locate-user-emacs-file "el-clone/sly/slynk"))))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/sly"))
    (autoload-if-found '(sly) "sly")
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (defun start-sly ()
      "Make Sly startup behavior similar to Slime"
      (interactive)
      (split-window-right)
      (sly)))
#+end_src

*** Flutter
**** dart
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bradyt/dart-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dart-mode"))
    (autoload-if-found '(dart-mode) "dart-mode")
    (add-to-list 'auto-mode-alist '("\\.dart$" . dart-mode))
    (with-eval-after-load 'dart
      (add-hook 'dart-mode-hook #'flycheck-mode)
      (setq dart-enable-analysis-server t)))
#+end_src

**** lsp-dart
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-dart"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-dart"))
    (add-hook 'dart-mode-hook #'lsp)
    (with-eval-after-load 'lsp-dart
      (dap-register-debug-template "Flutter :: Custom debug"
                                 (list :flutterPlatform "x86_64" :program "lib/main_debug.dart" :args
                                       '("--flavor" "customer_a")))))
#+end_src

**** flutter
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "amake/flutter.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flutter"))
    (autoload-if-found '(flutter-run-or-hot-reload) "flutter")
    (with-eval-after-load 'flutter
      (add-hook 'dart-mode (lambda () (add-hook 'after-save-hook #'flutter-run-or-hot-reload nil t)))))
#+end_src

*** Dockerfile
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "spotify/dockerfile-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dockerfile-mode"))
    (autoload-if-found '(dockerfile-mode) "dockerfile-mode")
    (add-to-list 'auto-mode-alist '("\\Dockerfile$" . dockerfile-mode))
    (with-eval-after-load 'dockerfile-mode
      (add-hook 'dockerfile-mode-hook #'flycheck-mode)))
#+end_src

*** F#
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "fsharp/emacs-fsharp-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-fsharp-mode"))
    (autoload-if-found '(fsharp-mode) "fsharp-mode")
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode)))
#+end_src

*** Hylang
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "hylang/hy-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hy-mode"))
    (autoload-if-found '(hy-mode) "hy")
    (add-hook 'hy-mode (lambda () (setq hy-shell-interpreter-args
                              (concat "--repl-output-fn=hy.contrib.hy-repr.hy-repr "
                                      hy-shell-interpreter-args)))))
#+end_src

*** Nix
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "NixOS/nix-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nix-mode"))

    (autoload-if-found '(nix-mode) "nix-mode")
    (autoload-if-found '(nix-drv-mode) "nix-drv-mode")
    (autoload-if-found '(company-nix) "nix-company")
    (add-to-list 'auto-mode-alist '("\\.nix$" . nix-mode))

    (with-eval-after-load 'nix-mode
      (add-hook 'nix-mode-hook #'lsp))

    (with-eval-after-load 'company
      (push 'company-nix company-backends)))
#+end_src

*** pwsh
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "jschaf/powershell.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/powershell"))
    (autoload-if-found '(powershell powershell-mode) "powershell")
    (add-to-list 'auto-mode-alist '("\\.ps1$" . powershell-mode)))
#+end_src

*** Rust
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rust-lang/rust-mode")
    (el-clone :repo "kwrooijen/cargo.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rust-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/cargo"))
    (autoload-if-found '(rust-mode) "rust-mode")
    (add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))
    (with-eval-after-load 'rust-mode
      (setq rust-format-on-save t)
      (add-hook 'rust-mode-hook #'lsp)
      (add-hook 'rust-mode-hook 'cargo-minor-mode)
      (add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
      (setq lsp-rust-server 'rust-analyzer)))
#+end_src

*** SATySFi
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "gfngfn/satysfi.el")
    (el-clone :repo "Kyure-A/satysfi-ts-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/satysfi"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/satysfi-ts-mode"))
    (require 'satysfi)
    ;; (autoload-if-found '(satysfi-mode) "satysfi")
    (autoload-if-found '(satysfi-ts-mode) "satysfi-ts-mode")
    (add-to-list 'auto-mode-alist '("\\.saty$" . satysfi-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.satyh$" . satysfi-ts-mode))
    (setq satysfi-command "satysfi"))
#+end_src

*** Svelte
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "leafOfTree/svelte-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/svelte-mode"))
    (autoload-if-found '(svelte-mode) "svelte-mode")
    (add-to-list 'auto-mode-alist '("\\.svelte$" . svelte-mode)))
#+end_src

*** TypeScript
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "ananthakumaran/typescript.el")
    (el-clone :repo "ananthakumaran/tide"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/typescript"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/tide"))
    (autoload-if-found '(typescript-mode) "typescript-mode")
    (autoload-if-found '(tide-setup) "tide")
    (add-to-list 'auto-mode-alist '("\\.js$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.mjs$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.cjs$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.mts$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.cts$" . typescript-mode))
    (add-hook 'typescript-mode-hook #'tide-setup)
    (add-hook 'typescript-mode-hook #'flycheck-mode)
    (setq tide-node-executable "~/.nix-profile/bin/node"))
#+end_src

** Markup Languages
*** CSV
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "emacsmirror/csv-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/csv-mode"))
    (autoload-if-found '(csv-mode) "csv-mode")
    (add-to-list 'auto-mode-alist '("\\.csv$" . csv-mode)))
#+end_src

*** Markdown
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "jrblevin/markdown-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/markdown-mode"))
    (autoload-if-found '(markdown-mode gfm-mode) "markdown-mode")
    (add-to-list 'auto-mode-alist '("\\.md$" . gfm-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown$" . gfm-mode))
    (with-eval-after-load 'markdown
      (setq markdown-command "github-markup")
      (setq markdown-command-needs-filename t)))
#+end_src

*** Mermaid
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abrochard/mermaid-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mermaid-mode"))
    (require 'mermaid-mode)
    (add-to-list 'auto-mode-alist '("\\.mmd$" . mermaid-mode))
    (add-to-list 'auto-mode-alist '("\\.mermaid$" . mermaid-mode)))
#+end_src

*** Org-mode
**** org-mode
#+begin_src emacs-lisp 
  (with-eval-after-load 'org
    (setq org-directory "~/document/org")
    (setq org-latex-pdf-process '("lualatex --draftmode %f"
                                "lualatex %f"))
    (setq org-startup-truncated nil)
    (setq org-enforce-todo-dependencies t)
    (setq org-support-shift-select t)
    (setq org-latex-pdf-process '("lualatex --draftmode %f"
                               "lualatex %f"))
    (setq org-latex-default-class "ltjsarticle"))
#+end_src

**** org-modern
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "minad/org-modern"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-modern"))
    (autoload-if-found '(org-modern-mode) "org-modern")
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src

**** org-roam
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "org-roam/org-roam"
              :load-paths `(,(locate-user-emacs-file "el-clone/org-roam/extensions")))
    (el-clone :repo "org-roam/org-roam-ui"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam/extensions"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/org-roam-ui"))
    (autoload-if-found '(org-roam-ui-mode) "org-roam-ui")
    (with-eval-after-load 'org-roam-mode
      (add-hook 'org-roam-mode-hook #'org-roam-ui-mode)))
#+end_src

**** org-tempo
#+begin_src emacs-lisp
  (with-delayed-execution
    (with-eval-after-load 'org
      (require 'org-tempo)))
#+end_src

*** VHDL
#+begin_src emacs-lisp 
  (with-delayed-execution
    (autoload-if-found '(vhdl-mode) "vhdl")
    (add-to-list 'auto-mode-alist '("\\.hdl$" . vhdl-mode)))
#+end_src

*** Web-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "fxbois/web-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/web-mode"))
    (autoload-if-found '(web-mode) "web-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.[agj]sp$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.gsp$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.liquid$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.svg$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))

    (with-eval-after-load 'web-mode
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-tag-auto-close-style 2)
      (setq web-mode-enable-auto-quoting nil)
      (setq web-mode-enable-current-column-highlight t)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-comment-style 2)
      (setq web-mode-enable-auto-indentation nil)))
#+end_src

*** YAML
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "yoshiki/yaml-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yaml-mode"))
    (autoload-if-found '(yaml-mode) "yaml-mode")
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
    (with-eval-after-load 'yaml-mode
      (add-hook 'yaml-mode-hook #'flycheck-mode)))
#+end_src


*** shell-script

#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "damon-kwok/modern-sh")
    (el-clone :repo "federicotdn/flymake-shellcheck"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/modern-sh"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flymake-shellcheck"))
    (autoload-if-found '(sh-mode) "sh-mode")
    (add-to-list 'auto-mode-alist '("\\.sh$" . sh-mode))
    (add-to-list 'auto-mode-alist '("\\.zsh$" . sh-mode))
    (autoload-if-found '(flymake-shell-check-load) "flymake-shell-check")
    (with-eval-after-load 'sh-mode
      (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
      (add-hook 'sh-mode-hook #'modern-sh-mode)))
#+end_src

** Shell
*** Eat
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :url "https://codeberg.org/akib/emacs-eat.git"
              :repo "emacs-eat"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-eat"))
    (autoload-if-found '(eat) "eat")
    (defun toggle-eat ()
      (interactive)
      (let ((kill-buffer-query-functions nil))
        (if (get-buffer "*eat*")
          (progn (kill-buffer "*eat*")
                 (eat))
        (eat)))))
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "purcell/exec-path-from-shell"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/exec-path-from-shell"))
    (autoload-if-found '(exec-path-from-shell-initialize) "exec-path-from-shell")
    (exec-path-from-shell-initialize)
    (with-eval-after-load 'exec-path-from-shell
      (setq exec-path-from-shell-check-startup-files nil)
      (setq exec-path-from-shell-arguments nil)
      (setq exec-path-from-shell-variables '("ASDF_CONFIG_FILE" "ASDF_DATA_DIR" "ASDF_DEFAULT_TOOL_VERSIONS_FILENAME" "ASDF_DIR"
                                          "GPG_AGENT_INFO" "GPG_KEY_ID" "PATH" "SHELL" "TEXMFHOME" "WSL_DISTRO_NAME" "http_proxy"))))
#+end_src

** Extensions
*** ace-window
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/ace-window"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ace-window")))
#+end_src

*** Centaur-tabs
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "ema2159/centaur-tabs"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/centaur-tabs"))
    (autoload-if-found '(centaur-tabs-mode) "centaur-tabs")
    (centaur-tabs-mode t)
    (with-eval-after-load 'centaur-tabs
      (centaur-tabs-group-by-projectile-project)
      (centaur-tabs-headline-match)
      (centaur-tabs-enable-buffer-reordering)
      (centaur-tabs-change-fonts "arial" 90)
      (setq centaur-tabs-height 30)
      (setq centaur-tabs-hide-tabs-hooks nil)
      (setq centaur-tabs-set-icons t)
      (setq centaur-tabs-set-bar 'under)
      (setq x-underline-at-descent-line t)
      (setq centaur-tabs-style "box")
      (setq centaur-tabs-set-modified-marker t)
      (setq centaur-tabs-show-navigation-buttons t)
      (setq centaur-tabs-adjust-buffer-order t)
      (setq centaur-tabs-cycle-scope 'groups)))
#+end_src

*** company
**** company
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "company-mode/company-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-mode"))
    (autoload-if-found '(global-company-mode) "company")
    (global-company-mode)
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "<tab>") #'company-complete-common-or-cycle)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      (setq company-selection-wrap-around t)
      (setq company-tooltip-align-annotations t)
      (setq company-require-match 'never)
      (setq company-transformers '(company-sort-by-statistics company-sort-by-backend-importance))))
#+end_src

**** company-box
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "sebastiencs/company-box"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-box"))
    (autoload-if-found '(company-box-mode) "company-box")
    (with-eval-after-load 'company-mode
      (when window-system
        (add-hook 'company-mode-hook #'company-box-mode)))
    (with-eval-after-load 'company-box
      (setq company-box-icons-alist 'company-box-icons-all-the-icons))
    (with-eval-after-load 'company-box-doc
      (setq company-box-doc-enable nil)))
#+end_src

**** company-posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tumashu/company-posframe"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-posframe"))
    (autoload-if-found '(company-posframe-mode) "company-posframe")
    (company-posframe-mode t))
#+end_src

**** company-quickhelp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "expez/company-quickhelp"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-quickhelp"))
    (autoload-if-found '(company-quickhelp-mode) "company-quickhelp")
    (company-quickhelp-mode t))
#+end_src

**** company-shell
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Alexander-Miller/company-shell"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-shell"))
    (autoload-if-found '(company-shell) "company-shell")
    (add-to-list 'company-backends 'company-shell))
#+end_src

**** company-statistics
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "company-mode/company-statistics"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/company-statistics"))
    (autoload-if-found '(company-statistics-mode) "company-statistics")
    (company-statistics-mode t))
#+end_src

*** Dashboard
**** dashboard-recover-layout-p
#+begin_src emacs-lisp
  (defvar dashboard-recover-layout-p nil
    "Whether recovers the layout.")
#+end_src

**** dashboard-goto-recent-files
[[https://github.com/seagle0128/.emacs.d/blob/b5158448e3c38cef2f81b53f894e6a0b7b302d48/lisp/init-dashboard.el#L158][Source]]
#+begin_src emacs-lisp
  (defun dashboard-goto-recent-files ()
    "Go to recent files."
    (interactive)
    (let ((func (local-key-binding "r")))
      (and func (funcall func))))
#+end_src

**** open-dashboard
[[https://github.com/seagle0128/.emacs.d/blob/8cbec0c132cd6de06a8c293598a720d377f3f5b9/lisp/init-dashboard.el#L198][Source]]
#+begin_src emacs-lisp
  (defun open-dashboard ()
    "Open the *dashboard* buffer and jump to the first widget."
    (interactive)
    (setq dashboard-recover-layout-p t)
    ;; Display dashboard in maximized window
    (delete-other-windows)
    ;; Refresh dashboard buffer
    (dashboard-open)
    ;; Jump to the first section
    (dashboard-goto-recent-files))
#+end_src
**** quit-dashboard
#+begin_src emacs-lisp
  (defun quit-dashboard ()
    "Quit dashboard window."
    (interactive)
    (quit-window t)
    (and dashboard-recover-layout-p
         (and (bound-and-true-p winner-mode) (winner-undo))
         (setq dashboard-recover-layout-p nil)))
#+end_src

**** projectile
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bbatsov/projectile"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/projectile"))
    (autoload-if-found '(projectile-mode) "projectile")
    (projectile-mode t))
#+end_src

**** dashboard
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "emacs-dashboard/emacs-dashboard"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-dashboard"))
    (autoload-if-found '(dashboard-mode dashboard-open) "dashboard")
    (setq dashboard-items '((bookmarks . 5)
                            (recents  . 5)
                            (projects . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Kyure_A's Emacs")
    (setq dashboard-footer-messages '("「今日も一日がんばるぞい！」 - 涼風青葉"
                                      "「なんだかホントに入社した気分です！」 - 涼風青葉"
                                      "「そしてそのバグの程度で実力も知れるわけです」- 阿波根うみこ"
                                      "「えーー！なるっちの担当箇所がバグだらけ！？」 - 桜ねね"
                                      "「C++ を完全に理解してしまったかもしれない」 - 桜ねね"
                                      "「これでもデバッグはプロ級だし 今はプログラムの知識だってあるんだからまかせてよね！」 - 桜ねね"))
    (setq dashboard-startup-banner (if (or (eq window-system 'x) (eq window-system 'ns) (eq window-system 'w32)) "~/.emacs.d/static/banner.png" "~/.emacs.d/static/banner.txt"))
    (open-dashboard)
    (with-eval-after-load 'dashboard
      (dashboard-setup-startup-hook)
      (define-key dashboard-mode-map (kbd "<f3>") #'quit-dashboard)))
#+end_src


*** dirvish/dired
**** dirvish
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "alexluigit/dirvish"
              :load-paths `(,(locate-user-emacs-file "el-clone/dirvish/extensions"))))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dirvish"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dirvish/extensions"))
    (autoload-if-found '(dirvish-override-dired-mode) "dirvish")
    (dirvish-override-dired-mode)
    (with-eval-after-load 'dirvish
      (setq dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-time file-size))
      (setq dirvish-preview-dispatchers (cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))))
#+end_src
**** dired
#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (setq dired-recursive-copies 'always)
    (put 'dired-find-alternate-file 'disabled nil)
    (define-key dired-mode-map (kbd "RET") #'dired-open-in-accordance-with-situation)
    (define-key dired-mode-map (kbd "<left>") #'dired-up-directory)
    (define-key dired-mode-map (kbd "<right>") #'dired-open-in-accordance-with-situation))
#+end_src
**** dired-async
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jwiegley/emacs-async"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-async"))
    (autoload-if-found '(dired-async-mode) "dired-async")
    (dired-async-mode t))
#+end_src
**** dired-k
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/dired-k"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dired-k"))
    (autoload-if-found '(dired-k) "dired-k")
    (add-hook 'dired-initial-position-hook #'dired-k))
#+end_src

**** dired-open-in-accordance-with-situation
[[https://nishikawasasaki.hatenablog.com/entry/20120222/1329932699][Source]]
#+begin_src emacs-lisp
  (defun dired-open-in-accordance-with-situation ()
    (interactive)
    (let ((file (dired-get-filename)))
      (if (file-directory-p file)
          (dired-find-alternate-file)
        (dired-find-file))))
#+end_src

**** dired-preview
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "protesilaos/dired-preview"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dired-preview"))
    (autoload-if-found '(dired-preview-global-mode) "dired-preview" nil t)
    ;; (dired-preview-global-mode t)
    )
#+end_src

**** dired-toggle-sudo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "renard/dired-toggle-sudo"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dired-toggle-sudo"))
    (require 'dired-toggle-sudo))
#+end_src

*** editorconfig
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "editorconfig/editorconfig-emacs"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/editorconfig-emacs"))
    (autoload-if-found '(editorconfig-mode) "editorconfig")
    (editorconfig-mode t))
#+end_src

*** eval-in-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kaz-yos/eval-in-repl"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/eval-in-repl")))

#+end_src

*** Flycheck
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "flycheck/flycheck"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/flycheck"))
    (autoload-if-found '(flycheck-mode flycheck-define-checker) "flycheck")
    (with-eval-after-load 'flycheck
      (setq flycheck-idle-change-delay 0)))
#+end_src

*** GitHub Copilot
GitHub Education License was expired
#+begin_src emacs-lisp :tangle no
  (leaf copilot
    :doc "An unofficial Copilot plugin for Emacs"
    :req "emacs-27.2" "s-1.12.0" "dash-2.19.1" "editorconfig-0.8.2" "jsonrpc-1.0.14"
    :tag "out-of-MELPA" "emacs>=27.2"
    :emacs>= 27.2
    :quelpa (copilot :repo "zerolfx/copilot.el"
                  :fetcher github
                  :upgrade t)
    :after editorconfig jsonrpc
    :require t
    :hook (prog-mode . copilot-mode)
    ;;:custom (copilot-node-executable . "~/.nix-profile/bin/node")
    :config

    (delq 'company-preview-if-just-one-frontend company-frontends)

    (leaf company-copilot-tab
      :url "https://github.com/zerolfx/copilot.el/blob/9b13478720581580a045ac76ad68be075466a963/readme.md?plain=1#L152"
      :after company
      :bind ;; (:company-active-map ( "<tab>" . company-copilot-tab))
      :preface
      (defun company-copilot-tab ()
     (interactive)
     (or (copilot-accept-completion)
         (company-indent-or-complete-common nil)))))

#+end_src

*** gcmh
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/gcmh"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/gcmh"))
    (autoload-if-found '(gcmh-mode) "gcmh")
    (gcmh-mode)
    (with-eval-after-load 'gcmh
      (setq gcmh-verbose t)))
#+end_src

*** hydra
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abo-abo/hydra"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/hydra")))
#+end_src

*** imenu-list
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "bmag/imenu-list"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/imenu-list")))
#+end_src

*** ivy/counsel
**** install
#+begin_src emacs-lisp
  ;; ivy, counsel and swiper are managed as monorepo.
  (eval-when-compile
    (el-clone :repo "abo-abo/swiper"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/swiper")))
#+end_src

**** counsel
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (autoload-if-found '(counsel-mode) "counsel")
    (counsel-mode t)
    (with-eval-after-load 'counsel
      (define-key counsel-mode-map [remap find-file] nil)
      (setq counsel-find-file-ignore-regexp (regexp-opt '("./" "../")))
      (setq read-file-name-function #'disable-counsel-find-file)))

  (defun disable-counsel-find-file (&rest args)
    "Disable `counsel-find-file' and use the original `find-file' with ARGS."
    (let ((completing-read-function #'completing-read-default)
          (completion-in-region-function #'completion--in-region))
      (apply #'read-file-name-default args)))

  (eval-when-compile
    (el-clone :repo "ericdanan/counsel-projectile"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/counsel-projectile"))
    (autoload-if-found '(counsel-projectile-mode) "counsel-projectile")
    (with-eval-after-load 'counsel
      (add-hook 'counsel-mode-hook #'counsel-projectile-mode)))
#+end_src

**** ivy
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (autoload-if-found '(ivy-mode ivy-read ivy-completion-read) "ivy")
    (with-eval-after-load 'ivy
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-extra-directories t)
      (setq enable-recursive-minibuffers t)))

  (eval-when-compile
    (el-clone :repo "Yevgnen/ivy-rich"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-rich"))
    (autoload-if-found '(ivy-rich-mode) "ivy-rich")
    (with-eval-after-load 'ivy
      (ivy-rich-mode t)))

  (eval-when-compile
    (el-clone :repo "tumashu/ivy-posframe"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-posframe"))
    (autoload-if-found '(ivy-posframe-mode) "ivy-posframe")
    (with-eval-after-load 'ivy
      (ivy-posframe-mode t)
      (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))))
#+end_src

**** swiper
#+begin_src emacs-lisp
  (with-delayed-execution-priority-high
    (autoload-if-found '(swiper) "swiper"))
#+end_src

*** lsp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacs-lsp/lsp-mode"
              :load-paths `(,(locate-user-emacs-file "el-clone/lsp-mode/clients"))))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-mode"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lsp-mode/clients"))
    (autoload-if-found '(lsp lsp-deferred) "lsp-mode")
    (with-eval-after-load 'lsp
      (setq lsp-enable-snippet t)
      (setq lsp-enable-indentation nil)
      (setq lsp-prefer-flymake nil)
      (setq lsp-document-sync-method 2)
      (setq lsp-inhibit-message t)
      (setq lsp-message-project-root-warning t)
      (setq create-lockfiles nil)
      (setq lsp-prefer-capf t)
      (setq lsp-headerline-breadcrumb-mode t)
      (add-hook 'lsp-mode-hook #'flycheck-mode)
      (with-eval-after-load 'satysfi-ts-mode
        (add-to-list 'lsp-language-id-configuration '(satysfi-ts-mode . "satysfi-ls"))
        (lsp-register-client (make-lsp-client :new-connection (lsp-stdio-connection '("~/.cargo/bin/satysfi-language-server"))
                                              :major-modes '(satysfi-ts-mode)
                                              :priority 0
                                              :activation-fn (lsp-activate-on "satysfi-ls")
                                              :server-id 'satysfi-ls)))))
  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/dap-mode"))
    (autoload-if-found '(dap-debug) "dap-mode"))
#+end_src

*** minimap
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "dengste/minimap"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/minimap"))
    (autoload-if-found '(minimap-mode) "minimap")
    (with-eval-after-load 'minimap
      (setq minimap-window-location 'right)
      (setq minimap-update-delay 0.2)
      (setq minimap-minimum-width 20)
      (setq minimap-major-modes '(prog-mode org-mode))))
#+end_src

*** multiple-cursors
https://dev.classmethod.jp/articles/emacs-multiple-cursors/
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "magnars/multiple-cursors.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/multiple-cursors"))
    (autoload-if-found '(mc/edit-lines mc/mark-next-like-this mc/mark-previous-like-this mc/mark-all-like-this) "multiple-cursors")
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") #'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") #'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") #'mc/mark-all-like-this))
#+end_src

*** neotree
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jaypei/emacs-neotree"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-neotree"))
    ;; (require 'neotree)
    ;; (autoload-if-found '(neotree-hide neotree-dir neotree-make-executor neo-open-file neo-open-dir) "neotree")
    (with-eval-after-load 'neotree
      (setq neo-smart-open t)
      (setq eo-create-file-auto-open t)
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))))
#+end_src

*** nu-fun
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "ayanyan/nihongo-util"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nihongo-util"))
    (require 'nu-fun)
    (setq nu-my-toten "，")
    (setq nu-my-kuten "．"))
#+end_src

*** paredit
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsmirror/paredit"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/paredit")))
#+end_src

*** puni
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "AmaiKinono/puni"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/puni"))
    (autoload-if-found '(puni-global-mode) "puni")
    (puni-global-mode)
    (with-eval-after-load 'lisp-mode
      (add-hook 'lisp-mode-hook #'puni-disable-puni-mode))
    (with-eval-after-load 'emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'puni-disable-puni-mode))
    (with-eval-after-load 'lisp-interaction-mode
      (add-hook 'lisp-interacton-mode-hook #'puni-disable-puni-mode)))
#+end_src

*** popwin
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/popwin"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/popwin"))
    (autoload-if-found '(popwin-mode) "popwin")
    (popwin-mode t)
    (with-eval-after-load 'popwin
      (setq display-buffer-function 'popwin:display-buffer)
      (setq popwin:special-display-config t)
      (setq popwin:popup-window-position 'bottom)))
#+end_src

*** posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "tumashu/posframe"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/posframe")))
#+end_src

*** restart-emacs
#+begin_src emacs-lisp :tangle no
  (eval-when-compile
    (el-clone :repo "iqbalansari/restart-emacs"))

  (when (string> "29.0" emacs-version)
    (with-delayed-execution
      (add-to-list 'load-path (locate-user-emacs-file "el-clone/restart-emacs"))
      (require 'restart-emacs)))
#+end_src

*** skewer-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "skeeto/skewer-mode")
    (el-clone :repo "mooz/js2-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/skewer"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/js2")))
#+end_src

*** smartparens
#+begin_src emacs-lisp :tangle no
  (eval-when-compile
    (el-clone :repo "Fuco1/smartparens"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/smartparens"))
    (autoload-if-found '(smartparens-global-mode) "smartparens")
    (smartparens-global-mode)
    (show-smartparens-global-mode t))
#+end_src

*** undo-tree
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "apchamberlain/undo-tree.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/undo-tree"))
    (autoload-if-found '(undo-tree-undo undo-tree-redo) "undo-tree")
    (with-eval-after-load 'undo-tree
      (global-undo-tree-mode)
      (setq undo-tree-auto-save-history t)
      (setq undo-tree-history-directory-alist  '(("." . "~/.emacs.d/.tmp")))))
#+end_src

*** visual-regexp
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "benma/visual-regexp.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/visual-regexp"))
    (autoload-if-found '(vr/replace) "visual-regexp"))
#+end_src

*** which-key
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "justbur/emacs-which-key"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-which-key"))
    (autoload-if-found '(which-key-mode) "which-key")
    (which-key-mode))
#+end_src

**** which-key-posframe
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "yanghaoxie/which-key-posframe"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/which-key-posframe"))
    (autoload-if-found '(which-key-posframe-mode) "which-key-posframe")
    (with-eval-after-load 'which-key
      (which-key-posframe-mode)))
#+end_src

*** yasnippet
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "joaotavora/yasnippet")
    (el-clone :repo "mkcms/ivy-yasnippet"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yasnippet"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/ivy-yasnippet"))
    (autoload-if-found '(yas-global-mode yas-minor-mode) "yasnippet")
    (autoload-if-found '(ivy-yasnippet) "ivy-yasnippet")
    (yas-global-mode t)
    (with-eval-after-load 'yasnippet
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))))
#+end_src

*** yasnippet-org
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "takeokunn/yasnippet-org"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yasnippet-org"))
    (autoload-if-found '(yasnippet-org) "yasnippet-org")
    (with-eval-after-load 'yasnippet-org
      (setq yasnippet-org-verbose t)
      (setq yasnippet-org-file (locate-user-emacs-file "snippets.org"))))
#+end_src

*** yatemplate
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "mineo/yatemplate"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yatemplate"))
    (autoload-if-found '(yatemplate-fill-alist) "yatemplate")
    (auto-insert-mode t)
    (yatemplate-fill-alist))
#+end_src

** Utilities
*** Docker
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Silex/docker.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/docker"))
    (require 'docker))
#+end_src
*** Elcord
Allows you to integrate Rich Presence from Discord.
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "Mstrodl/elcord"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/elcord")))  
#+end_src

*** Jobcan
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Kyure-A/jobcan.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/jobcan"))
    (require 'jobcan))
#+end_src

*** Magit
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "magit/magit"
              :load-paths `(,(locate-user-emacs-file "el-clone/magit/lisp")))
    (el-clone :repo "magit/transient"
              :load-paths `(,(locate-user-emacs-file "el-clone/transient/lisp")))
    (el-clone :repo "magit/with-editor"
              :load-paths `(,(locate-user-emacs-file "el-clone/with-editor/lisp"))))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/magit/lisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/transient/lisp"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/with-editor/lisp"))
    (autoload-if-found '(global-git-commit-mode) "git-commit")
    (autoload-if-found '(magit-status magit-blame) "magit")
    (global-git-commit-mode)
    (with-eval-after-load 'magit
      (setq magit-repository-directories '(("~/ghq/" . 3)))
      (add-hook 'magit-status-mode-hook #'toggle-centaur-tabs-local-mode)))
#+end_src

*** mozc
#+begin_src emacs-lisp :tangle no
  (leaf mozc
    :doc "minor mode to input Japanese with Mozc"
    :tag "input method" "multilingual" "mule"
    :added "2023-07-20"
    :ensure t
    :require t
    :config (setq mozc-candidate-style 'echo-area))
#+end_src

*** Node.js
**** nodejs-repl
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "abicky/nodejs-repl.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nodejs-repl")))
#+end_src

**** nvm
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rejeep/nvm.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nvm")))
#+end_src

*** oj
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "conao3/oj.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/oj"))
    (with-eval-after-load 'oj
      (setq oj-shell-program "zsh")
      (setq oj-open-home-dir "~/oj-files/")
      (setq oj-default-online-judge 'atcoder)
      (setq oj-compiler-c "gcc")
      (setq oj-compiler-python "cpython")))
#+end_src

*** Prettier
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "jscheid/prettier.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/prettier"))
    (add-hook 'after-init-hook #'global-prettier-mode))
#+end_src

*** quickrun
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "syohex/emacs-quickrun"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-quickrun"))
    (autoload-if-found '(quickrun) "emacs-quickrun")
    (push '("*quickrun*") popwin:special-display-config)
    (defun quickrun-sc (start end)
      (interactive "r")
      (if mark-active
          (quickrun :start start :end end)
        (quickrun))))
#+end_src


** Visual
*** all-the-icons
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "domtronn/all-the-icons.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons")))
#+end_src

*** all-the-icons-dired
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "wyuenho/all-the-icons-dired"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons-dired"))
    (autoload-if-found '(all-the-icons-dired-mode) "all-the-icons-dired")
    (add-hook 'dired-mode #'all-the-icons-dired-mode))
#+end_src

*** all-the-icons-ivy-rich
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "seagle0128/all-the-icons-ivy-rich"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/all-the-icons-ivy-rich"))
    (autoload-if-found '(all-the-icons-ivy-rich-mode) "all-the-icons-ivy-rich")
    (all-the-icons-ivy-rich-mode t))
#+end_src

*** beacon
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "Malabarba/beacon"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/beacon"))
    (autoload-if-found '(beacon-mode) "beacon")
    (beacon-mode t)
    (with-eval-after-load 'beacon
      (setq beacon-color "red")))
#+end_src

*** display-line-numbers
#+begin_src emacs-lisp
  (with-delayed-execution
    (custom-set-variables '(display-line-numbers-width-start t)))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "seagle0128/doom-modeline"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/doom-modeline"))
    (autoload-if-found '(doom-modeline-mode) "doom-modeline")
    ;; (doom-modeline-mode t)
    (with-eval-after-load 'doom-modeline
      (setq doom-modeline-icon t)))
#+end_src

*** emojify
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "iqbalansari/emacs-emojify"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emojify"))
    (autoload-if-found '(global-emojify-mode) "emojify")
    (add-hook 'after-init-hook #'global-emojify-mode))
#+end_src

*** hide-mode-line
#+begin_src emacs-lisp  :tangle no
  (leaf hide-mode-line
    :doc "minor mode that hides/masks your modeline"
    :req "emacs-24.4"
    :tag "mode-line" "frames" "emacs>=24.4"
    :url "https://github.com/hlissner/emacs-hide-mode-line"
    :added "2023-09-05"
    :emacs>= 24.4
    :ensure t
    :require t
    :hook
    (vterm-mode . hide-mode-line-mode)
    (dashboard-mode . hide-mode-line-mode))
#+end_src

*** mini-echo
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "liuyinz/mini-echo.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/mini-echo"))
    (autoload-if-found '(mini-echo-mode) "mini-echo" nil t)
    (mini-echo-mode))
#+end_src

*** mini-modeline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "kiennq/emacs-mini-modeline"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-mini-modeline"))
    (autoload-if-found '(mini-modeline-mode) "mini-modeline" nil t))
#+end_src

*** lambda-line
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Lambda-Emacs/lambda-line"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/lambda-line"))
    (autoload-if-found '(lambda-line-mode) "lambda-line" nil t)
    (lambda-line-mode)
    (with-eval-after-load 'lambda-line-mode
      (lambda-line-icon-time t) ;; requires ClockFace font (see below)
      (lambda-line-clockface-update-fontset "ClockFaceRect") ;; set clock icon
      (lambda-line-position 'top) ;; Set position of status-line 
      (lambda-line-abbrev t) ;; abbreviate major modes
      (lambda-line-hspace "  ")  ;; add some cushion
      (lambda-line-prefix t) ;; use a prefix symbol
      (lambda-line-prefix-padding nil) ;; no extra space for prefix 
      (lambda-line-status-invert nil)  ;; no invert colors
      (lambda-line-gui-ro-symbol  " ⨂") ;; symbols
      (lambda-line-gui-mod-symbol " ⬤") 
      (lambda-line-gui-rw-symbol  " ◯") 
      (lambda-line-space-top +.30)  ;; padding on top and bottom of line
      (lambda-line-space-bottom -.30)
      (lambda-line-symbol-position 0.1) ;; adjust the vertical placement of symbol
      ))
#+end_src

*** monokai
#+begin_src emacs-lisp :tangle no
  (eval-when-compile
    (el-clone :repo "Kyure_A/monokai-emacs"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/monokai-emacs"))
    (require 'monokai-theme)
     (with-eval-after-load 'monokai-theme
       (load-theme 'monokai t)))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "Kyure-A/themes"
              :load-paths `(,(locate-user-emacs-file "el-clone/themes/extensions"))))

  (with-delayed-execution-priority-high
    (message "Install doom-themes...")
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/themes"))
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/themes/extensions"))

    ;; (autoload-if-found '(doom-themes-enable-org-fontification) "doom-themes-ext-org" nil t)
    (autoload-if-found '(doom-themes-neotree-config) "doom-themes-ext-neotree" nil t)

    ;; (doom-themes-enable-org-fontification)
    (doom-themes-neotree-config)

    (when (require 'doom-themes)
      (load-theme 'doom-monokai-textmate t))

    (with-eval-after-load 'doom-themes
      (setq doom-themes-padded-modeline t)
      (setq doom-themes-enable-bold nil)
      (setq doom-themes-enable-italic nil)))
#+end_src

*** nano-modeline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rougier/nano-modeline"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nano-modeline"))
    (autoload-if-found '(nano-modeline-text-mode) "nano-modeline")
    ;; (nano-modeline-text-mode t)
    )
#+end_src

*** nerd-icons
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "rainstormstudio/nerd-icons.el"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/nerd-icons")))
#+end_src

*** page-break-lines
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "purcell/page-break-lines"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/page-break-lines"))
    (autoload-if-found '(page-break-lines-mode global-page-break-lines-mode) "page-break-lines")
    (global-page-break-lines-mode t))
#+end_src

*** paren
#+begin_src emacs-lisp
  (with-delayed-execution
    (show-paren-mode t)
    (with-eval-after-load 'show-paren-mode
      (set-face-underline-p 'show-paren-match-face "#ffffff")
      (setq show-paren-delay 0)
      (setq show-paren-style 'expression)))
#+end_src

*** powerline
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "milkypostman/powerline"))

  (with-delayed-execution-priority-high
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/powerline")))
#+end_src

*** power-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "elizagamedev/power-mode.el"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/power-mode"))
    (require 'power-mode))
#+end_src

*** rainbow-mode
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "emacsmirror/rainbow-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rainbow"))
    (autoload-if-found '(rainbow-mode) "rainbow")
    ;; (add-hook 'web-mode-hook #'rainbow-mode)
    )
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp 
  (eval-when-compile
    (el-clone :repo "Fanael/rainbow-delimiters"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/rainbow-delimiters"))
    (autoload-if-found '(rainbow-delimiters-mode) "rainbow-delimiters")
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** solaire-mode
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "hlissner/emacs-solaire-mode"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-solaire")))
#+end_src

*** symbol-overlay
alternative highlight-symbol
#+begin_src emacs-lisp :tangle no
  (eval-when-compile
    (el-clone :repo "wolray/symbol-overlay"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/symbol-overlay"))
    (autoload-if-found '(symbol-overlay-mode) "symbol-over-lay")
    (add-hook 'prog-mode-hook #'symbol-overlay-mode))
#+end_src

*** yascroll
#+begin_src emacs-lisp
  (eval-when-compile
    (el-clone :repo "emacsorphanage/yascroll"))

  (with-delayed-execution
    (add-to-list 'load-path (locate-user-emacs-file "el-clone/yascroll"))
    (autoload-if-found '(global-yascroll-bar-mode) "yascroll")
    (global-yascroll-bar-mode t))
#+end_src

** Functions
*** toggle-centaur-tabs-local-mode
#+begin_src emacs-lisp
  (defun toggle-centaur-tabs-local-mode()
    (interactive)
    (call-interactively 'centaur-tabs-local-mode)
    (call-interactively 'centaur-tabs-local-mode))
#+end_src
*** backward-kill-line
#+begin_src emacs-lisp
  (defun backward-kill-line (arg)
    "Kill ARG lines backward."
    (interactive "p")
    (kill-line (- 1 arg)))
#+end_src
*** delete-word
[[https://qiita.com/ballforest/items/5a76f284af254724144a][Source]]
#+begin_src emacs-lisp
  (defun delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument ARG, do this that many times."
    (interactive "p")
    (delete-region (point) (progn (forward-word arg) (point))))
#+end_src
*** backward-delete-word
[[https://qiita.com/ballforest/items/5a76f284af254724144a][Source]]
#+begin_src emacs-lisp
  (defun backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument ARG, do this that many times."
    (interactive "p")
    (delete-word (- arg)))
#+end_src

*** eat-toggle

*** others
#+begin_src emacs-lisp 
  (defun Kyure_A/echo-choices (list message-str)
    "Displays choices in the echo area and evaluates the choice"
    (setq chosen (completing-read "Choose an option: " list))
    (cl-loop for i
             below (length list)
             do (when (equal (car (nth i list)) chosen)
                  (eval (eval (cdr (nth i list)))) ;; quote を外すのが雑
                  (cl-return))
             finally (message message-str)))

    (defun Kyure_A/open-recentf ()
      "Outputs a list of 10 most recently opened files to the echo area"
      (interactive)
      (let* ((recent-opened-files '()))
        (cl-loop for i below 10
                 do (push (cons (nth i recentf-list) `(find-file ,(nth i recentf-list))) recent-opened-files))
        (setq recent-opened-files (reverse recent-opened-files))
        (Kyure_A/echo-choices recent-opened-files "not found")))

    (defun Kyure_A/open ()
      (interactive)
      (let* ((choices '(("dashboard" . (open-dashboard))
                        ("documents" . (if (file-exists-p "~/documents")
                                           (find-file "~/documents")
                                         (find-file "~/Documents")))
                        ("dotfiles" . (find-file "~/dotfiles"))
                        (".emacs.d" . (find-file "~/.emacs.d"))
                        ("elpa" . (find-file package-user-dir))
                        ("recent" . (open-recentf))
                        ("wsl" . (find-file "/mnt/c/Users/kyre/")))))
        (Kyure_A/echo-choices choices "invalid options")))

    (defun Kyure_A/start-repl ()
      (interactive)
      (let* ((mode-repl-pair '(("lisp-mode" . (start-sly))
                               ("hy-mode" . (hy-repl)))))
        (cl-loop for i
                 below (length mode-repl-pair)
                 do (when (equal (car (nth i mode-repl-pair)) (format "%s" major-mode))
                      (eval (eval (cdr (nth i mode-repl-pair))))
                      (cl-return))
                 finally (message (format "[start-repl] couldn't found repl for %s" major-mode)))))
#+end_src

** Footer
#+begin_src emacs-lisp 
  (provide 'init)

    ;; End:
    ;;; init.el ends here
#+end_src
